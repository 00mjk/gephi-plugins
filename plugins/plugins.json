{
  "plugins": [
    {
      "id": "geolayout-plugin",
      "name": "GeoLayout",
      "short_description": "A layout to display geocoded data",
      "long_description": "This plugin contains the \"GeoLayout\", which displays your graph based on geocoded attributes (i.e. latitude and longitude) and standard projections.",
      "readme": "## Introduction\n\nA Gephi plugin to display your geocoded graphs.\n\n## Plugin Owner’s Notes\n\nThis plugin contains only a layout (“GeoLayout”) to display your graph according to geocoded attributes. To use it:\n\n1. Select the two attributes which contain the geocoded coordinates of your nodes (latitude and longitude)\n2. Select the projection you want to use\n3. Set the other parameters according to the selected projection\n4. Launch the algorithm\n\nThe available projections are:\n\n* [Mercator](http://bit.ly/JQuvw)\n* [Tranverse Mercator](http://bit.ly/btWRTI)\n* [Miller cylindrical](http://bit.ly/agJOxd)\n* [Gall-Peters](http://bit.ly/Nj5cW)\n* [Sinusoidal](http://bit.ly/a8SsNg)\n* [Lambert cylindrical](http://bit.ly/cnuxqr)\n* [Winkel Tripel](http://en.wikipedia.org/wiki/Winkel_tripel_projection)\n* [Equirectangular](http://bit.ly/vxEmy)\n\nFor any questions or just more information, you can check the related [thread](http://bit.ly/a6itGZ) on the Gephi forum.\n\nAnd if, for any reason, some of your nodes do not have valid values on the selected attributes (for latitude and longitude), they will be displayed on a line on the bottom of your graph (then, you can delete them or do what you want). Also make sure your latitude and longitude columns are of type \u0027double\u0027, not \u0027string\u0027.\n",
      "license": "GPL v3",
      "authors": [
        {
          "name": "Alexis Jacomy",
          "email": null,
          "link": null
        }
      ],
      "category": "Layout",
      "last_update": "December 13, 2015",
      "images": [
        {
          "image": "imgs/geolayout-plugin/geolayout_example.png",
          "thumbnail": "imgs/geolayout-plugin/geolayout_example-thumbnail.png"
        },
        {
          "image": "imgs/geolayout-plugin/geolayout_screenshot.png",
          "thumbnail": "imgs/geolayout-plugin/geolayout_screenshot-thumbnail.png"
        }
      ],
      "versions": {
        "0.8.2": {
          "url": "0.8.2/org-gephi-plugins-layout-geo.nbm",
          "last_update": "January 4, 2013"
        },
        "0.9-SNAPSHOT": {
          "url": "0.9-SNAPSHOT/geolayout-plugin-0.9-SNAPSHOT.nbm",
          "last_update": "December 13, 2015"
        }
      },
      "sourcecode": null,
      "homepage": null
    },
    {
      "id": "linkfluence-plugin",
      "name": "Linkfluence Plugin",
      "short_description": "Public plugin for Linkfluence with some extra data manipulation features and tools",
      "long_description": "This plugin provides some extra features for Overview and Data Laboratory such as nodes massive tagging, opening of urls from nodes and copying columns to clipboard.",
      "readme": null,
      "license": "GPL v3",
      "authors": [
        {
          "name": "Eduardo Ramos",
          "email": null,
          "link": null
        }
      ],
      "category": "Tool",
      "last_update": "December 13, 2015",
      "images": [
        {
          "image": "imgs/linkfluence-plugin/img.png",
          "thumbnail": "imgs/linkfluence-plugin/img-thumbnail.png"
        }
      ],
      "versions": {
        "0.9-SNAPSHOT": {
          "url": "0.9-SNAPSHOT/linkfluence-plugin-0.9-SNAPSHOT.nbm",
          "last_update": "December 13, 2015"
        }
      },
      "sourcecode": null,
      "homepage": null
    },
{
  "id": "label-propagation-clustering",
  "name": "Label Propagation Clustering",
  "catchphrase": "",
  "types": [
    "clusters"
  ],
  "images": [
    "imgs/label-propagation-clustering/snapshot.png"
  ],
  "authors": [
    {
      "name": "Oualid Boutemine",
      "link": "https://github.com/BoutemineOualid"
    }
  ],
  "sourcecode": "https://github.com/BoutemineOualid/gephi-plugins-label_propagation",
  "license": "GPL v3",
  "versions": {
    "0.8.2": "0.8.2/labelpropagationclustering1.1.nbm"
  },
  "last_update": "June 23, 2014",
  "description": "<p>A plugin that provides an implementation of the label propagation graph clustering algorithm described in (1).<br>\nThis plugin offers an animated mode which allows the visualization of the labels propagation over the graph nodes. This feature is helpful when studying the behaviour of the algorithm on specific use cases. The current implementation does not take into consideration edges weights/direction, it also lacks defensive/offensive propagation support (2) which improves the performance. These missing features will be added later.</p>\n<p>1. Raghavan, U. N., Albert, R., &amp; Kumara, S. (2007). Near linear time algorithm to detect community structures in large-scale networks. Physical Review E, 76(3), 036106.<br>\n2. Šubelj, L., &amp; Bajec, M. (2011). Unfolding communities in large complex networks: Combining defensive and offensive label propagation for core extraction. Physical Review E, 83(3), 036103.</p>"
},{
  "id": "girvan-newman-clustering",
  "name": "Girvan Newman Clustering",
  "catchphrase": "",
  "types": [
    "clusters"
  ],
  "images": [
    "imgs/girvan-newman-clustering/gn.png"
  ],
  "authors": [
    {
      "name": "Jaroslav Kuchar",
      "link": "https://github.com/jaroslav-kuchar/"
    }
  ],
  "sourcecode": "https://github.com/jaroslav-kuchar/GirmanNewmanClustering",
  "license": "GPL v3",
  "versions": {
    "0.8.2": "0.8.2/cz-cvut-fit-krizeji1-girvan_newman.nbm"
  },
  "last_update": "May 30, 2014",
  "description": "<p>The Girvan Newman Clustering plugin for Gephi. This plugin finds clusters in graph, which can be used in Social Network Analysis.</p>\n<p>The Girvan–Newman algorithm detects communities by progressively removing edges from the original network. The connected components of the remaining network are the comunnities. Instead of trying to construct a measure that tells us which edges are the most central to communities, the Girvan–Newman algorithm focuses on edges that are most likely “between” communities.</p>"
},{
  "id": "markov-cluster-algorithm-mcl",
  "name": "Markov Cluster Algorithm (MCL)",
  "catchphrase": "",
  "types": [
    "clusters"
  ],
  "images": [
    "imgs/markov-cluster-algorithm-mcl/mcl1.png",
    "imgs/markov-cluster-algorithm-mcl/mcl.png"
  ],
  "authors": [
    {
      "name": "Jaroslav Kuchar",
      "link": "https://github.com/jaroslav-kuchar/"
    }
  ],
  "sourcecode": "https://github.com/jaroslav-kuchar/MarkovClustering",
  "license": "GPL v3",
  "versions": {
    "0.8.2": "0.8.2/cz-cvut-fit-krizeji1-markov_cluster.nbm"
  },
  "last_update": "May 30, 2014",
  "description": "<p>The Markov Clustering plugin for Gephi. This plugin finds clusters in graph, which can be used in Social Network Analysis.</p>\n<p>Clustering on Graphs: The Markov Cluster Algorithm (MCL)</p>\n<p>MCL details are freely available at http://www.micans.org/mcl/</p>"
},{
  "id": "molecular-complex-detection-mcode-clustering",
  "name": "Molecular Complex Detection (MCODE) Clustering",
  "catchphrase": "",
  "types": [
    "clusters"
  ],
  "images": [
    "imgs/molecular-complex-detection-mcode-clustering/mcode.png"
  ],
  "authors": [
    {
      "name": "Jaroslav Kuchar",
      "link": "https://github.com/jaroslav-kuchar/"
    }
  ],
  "sourcecode": "https://github.com/jaroslav-kuchar/MCodeClustering",
  "license": "GPL v3",
  "versions": {
    "0.8.2": "0.8.2/cz-cvut-fit-krizeji1-mcode.nbm"
  },
  "last_update": "May 29, 2014",
  "description": "<p>The Molecular Complex Detection clustering plugin for Gephi. This plugin finds clusters in graph, which can be used in Social Network Analysis.</p>\n<p>Clustering on Graphs:</p>\n<p>details are available at http://www.biomedcentral.com/1471-2105/4/2</p>"
},{
  "id": "gc-viz",
  "name": "GC-Viz",
  "catchphrase": "",
  "types": [
    "clusters",
    "layout"
  ],
  "images": [],
  "authors": [
    {
      "name": "Brigitte Boden",
      "link": "http://dme.rwth-aachen.de/de/gcviz"
    }
  ],
  "sourcecode": "https://github.com/bboden/gephi-plugins/",
  "license": "GPL v3",
  "versions": {
    "0.8.2": "0.8.2/org-i9-GCViz1.nbm"
  },
  "last_update": "November 7, 2013",
  "description": "<p>The GC-Viz plugin contains the algorithms GAMer and DB-CSC for the clustering of graphs with node attributes. It also contains a layout for visualizing and comparing the clustering results.</p>\n<p>The plugin has been developed by Brigitte Boden, Roman Haag and Houran Ketabdar.</p>\n<p>The plugin is described in the following paper: Brigitte Boden, Roman Haag, and Thomas Seidl. Detecting and exploring clusters in attributed graphs. In 22st ACM International Conference on Information and Knowledge Management, CIKM13, 2013.</p>"
},{
  "id": "chinese-whispers-clustering",
  "name": "Chinese Whispers Clustering",
  "catchphrase": "",
  "types": [
    "clusters"
  ],
  "images": [
    "imgs/chinese-whispers-clustering/cw-new.png"
  ],
  "authors": [
    {
      "name": "Thomas Efer",
      "link": "http://asv.informatik.uni-leipzig.de/staff/Thomas_Efer"
    }
  ],
  "sourcecode": "https://github.com/efi/gephi-cw",
  "license": "GPL v2",
  "versions": {
    "0.8.2": "0.8.2/de-uni_leipzig-informatik-asv-gephi-chinesewhispers4.nbm"
  },
  "last_update": "June 21, 2015",
  "description": "<p>Chinese Whispers Clustering according to the <a href=\"http://wortschatz.uni-leipzig.de/~cbiemann/pub/2006/BiemannTextGraph06.pdf\">paper by Chris Biemann</a>. The algorithm is time-linear (w.r.t. the number of edges), non-deterministic and extremely fast!</p>\n<p>The current implementation represents a simple variant (no random class mutations yet), works single-threaded and allows for a randomized (rgb-space) coloring of the resulting clusters giving a fast visual feedback. For questions and ideas please contact the plugin author <a title=\"efer@informatik.uni-leipzig.de\" href=\"mailto:efer@informatik.uni-leipzig.de\">Thomas Efer</a>.</p>\n<p><strong><em>Changelog</em></strong>:</p>\n<ul>\n<li><em>2015-06-21, v. 0.8:</em> Novel cluster naming for greater workflow consistency<em>&nbsp;(contributions from Jörg Bliesener)</em></li>\n<li><em>2014-07-23, v. 0.7:</em> Added options for the handling of unconnected nodes</li>\n<li><em>2014-02-16, v. 0.6:</em>&nbsp;Added option to cluster only visible graph parts<em> (contributions from Jörg Bliesener)</em></li>\n<li><em></em><em>2014-02-08, v. 0.5:</em> Fixed freezing bug, Renewed settings UI<em> (contributions from Jörg Bliesener)</em></li>\n<li><em>2012-08-21, v. 0.3:</em> Stabilized color assignment, Added options for randomized node ordering, stepwise vs. continuous mode and minimum edge weight</li>\n<li><em>2012-08-16, v. 0.2:</em> Added options to control class propagation calculations (Modes: top / dist / dist-log / vote)</li>\n<li><em>2012-05-09, v. 0 .1:</em> Initial release</li>\n</ul>"
},{
  "id": "recast-column",
  "name": "Recast column",
  "catchphrase": "",
  "types": [
    "data laboratory"
  ],
  "images": [
    "imgs/recast-column/image_4f4d1f86b0c4f.png"
  ],
  "authors": [
    {
      "name": "Taras Klaskovsky",
      "link": "https://github.com/megaterik"
    }
  ],
  "sourcecode": "https://github.com/megaterik/gephi/commits/change-type-of-column",
  "license": "GPL v3",
  "versions": {
    "0.8.2": "0.8.2/org-gephi-recast_manipulator-1.nbm"
  },
  "last_update": "February 19, 2013",
  "description": "<h3>Introduction</h3>\n<p>Allows to recast column type in data laboratory.</p>\n<h3>Plugin Owner’s Notes</h3>\n<p>Useful when imported column has default type string, but contains numbers, or booleans, or chars. Has autoconvert option and gui. Also can get any or set any standart column, which is currently impossible to do with standart interface. Installed in Data Laboratory -&gt; More actions.</p>\n<p>Feel free to contact me with any questions or suggestions: megaterik at gmail.com.<br>\n–Taras Klaskovsky</p>"
},{
  "id": "google-maps-exporter",
  "name": "Google Maps Exporter",
  "catchphrase": "",
  "types": [
    "exports"
  ],
  "images": [
    "imgs/google-maps-exporter/gme-02.png",
    "imgs/google-maps-exporter/gme-01.png",
    "imgs/google-maps-exporter/gme-high.png",
    "imgs/google-maps-exporter/graphmap-logo.jpg"
  ],
  "authors": [
    {
      "name": "P M",
      "link": "https://googlemapsexporter.firebaseapp.com/index2.html"
    }
  ],
  "sourcecode": "https://github.com/pegep/GoogleMapsExporter",
  "license": "GPL v3",
  "versions": {
    "0.8.2": "0.8.2/"
  },
  "last_update": "December 14, 2015",
  "description": "<p>Exports graphs from Gephi for use with Google Maps API. Similar to browsing maps in Google Maps you can browse graphs the same way. Pre-rendering the graph makes it possible to view even large graphs fluently in browser.</p>\n<p>Usage:<br>\n* File &gt; Export &gt; Google Maps Exporter<br>\n* Open index.html or index2.html in export directory</p>\n<p>The exporter will render the graph as PNG tiles and output a HTML and JavaScript files. There are two examples: index.html + ui.js and index2.html + ui2.js. Custom functionality (eg. hovering over a node, clicking a node) can be added with Google Maps API.</p>\n<p>Live example at<br>\n<a title=\"https://googlemapsexporter.firebaseapp.com/index.html\" href=\"https://googlemapsexporter.firebaseapp.com/index.html\">https://googlemapsexporter.firebaseapp.com/index.html</a> and<br>\n<a title=\"https://googlemapsexporter.firebaseapp.com/index2.html\" href=\"https://googlemapsexporter.firebaseapp.com/index2.html\">https://googlemapsexporter.firebaseapp.com/index2.html</a></p>\n<div id=\"attachment_30917\" class=\"wp-caption alignnone\" style=\"width: 310px\"><a href=\"https://marketplace.gephi.org/wp-content/uploads/2014/11/gme-01.png?022bbc\"><img class=\"size-medium wp-image-30917\" title=\"Browsing a graph\" alt=\"gme-01\" src=\"https://marketplace.gephi.org/wp-content/uploads/2014/11/gme-01-300x259.png?022bbc\" width=\"300\" height=\"259\"></a><p class=\"wp-caption-text\">Browsing graph is similar to browsing Google Maps</p></div>\n<div id=\"attachment_30918\" class=\"wp-caption alignnone\" style=\"width: 310px\"><a href=\"https://marketplace.gephi.org/wp-content/uploads/2014/11/gme-02.png?022bbc\"><img class=\"size-medium wp-image-30918\" title=\"Browsing with node data visible\" alt=\"\" src=\"https://marketplace.gephi.org/wp-content/uploads/2014/11/gme-02-300x247.png?022bbc\" width=\"300\" height=\"247\"></a><p class=\"wp-caption-text\">Visible nodes are updated on the data table below graph. Table is automatically updated while panning and zooming in on the graph. Columns can be ordered.</p></div>\n<p>&nbsp;</p>"
},{
  "id": "export-to-shp",
  "name": "Export to SHP",
  "catchphrase": "",
  "types": [
    "exports"
  ],
  "images": [],
  "authors": [
    {
      "name": "Roman Seidl",
      "link": "http://granul.at"
    }
  ],
  "sourcecode": "https://github.com/romanseidl/SHPExporter",
  "license": "GPL v3",
  "versions": {
    "0.8.2": "0.8.2/at-granul-gephi-shpexporter.nbm"
  },
  "last_update": "April 16, 2013",
  "description": "<p>This Plugin exports two Shapefiles: one for the edges, and one for the nodes. The shapefiles (the respective DBF-Files) contain the columns of the edge and shape tables. It adds the current width/size and color in gephi to two additional columns.</p>\n<p>The geography is rather simple. The location info is either read from columns in the node table (I use parts of David Sheppard’s ExportToEarth Exporter to do that) or from a fake geography – that is the current position of the nodes in the gephi layout.</p>\n<p>One can then easily import the two datasets into QGIS or any other mapping tool and add a symbology. The only drawback of this simple solution is that in such tools you won’t be able to draw arrows or even more arrows that don’t intersect when they go into both directions.</p>\n<p>Copyright (c) 2013 by Roman Seidl – romanAeTgranul.at</p>\n<p>This Program uses code copyright (c) 2012 by David Shepard</p>"
},{
  "id": "sigmajs-exporter",
  "name": "Sigmajs Exporter",
  "catchphrase": "",
  "types": [
    "exports"
  ],
  "images": [
    "imgs/sigmajs-exporter/twitter-620.png"
  ],
  "authors": [
    {
      "name": "Scott Hale",
      "link": "http://www.scotthale.net/"
    }
  ],
  "sourcecode": "https://github.com/oxfordinternetinstitute/gephi-plugins/tree/JSONExporter/sigmaExporter",
  "license": "GPL v3",
  "versions": {
    "0.8.2": "0.8.2/uk-ac-ox-oii-sigmaexporter2.nbm"
  },
  "last_update": "August 9, 2013",
  "description": "<p>Export your network from Gephi to a predefined Sigma.js template. Choose to include search, group selection, explanatory text, etc. without having to do any HTML/JavaScript coding. Upload the output to any webserver and enjoy a rich HTML5 interactive visualization of your network.</p>\n<p>Example output is available at: <a href=\"http://blogs.oii.ox.ac.uk/vis/?page_id=115\">http://blogs.oii.ox.ac.uk/vis/?page_id=115</a> More features are coming and better validation is needed, but I’m making this alpha version of the code available quickly because of the demand I’ve received for it. More <a href=\"http://blogs.oii.ox.ac.uk/vis/\">information on the project</a> is available on <a href=\"http://blogs.oii.ox.ac.uk/vis/\">our blog</a>. The underlying <a href=\"https://github.com/oxfordinternetinstitute/InteractiveVis/\">HTML5/CSS/JS framework used to render the graphs</a> is also available on <a href=\"https://github.com/oxfordinternetinstitute/InteractiveVis/\">GitHub as a separate project</a> and changes / pull requests are welcome.</p>\n<p>Once installed, restart Gephi and you will see a <strong>Export to sigma.js </strong>option on the <strong>File-&gt;Export</strong> menu. Choose a location to export to, set export customization options, and click OK. The resulting folder can be uploaded to any webserver to showcase your network. Please note, due to browser security restrictions in Chrome you will not be able to view the result without a webserver (Other browsers may work locally).</p>\n<p>Please report any issues or feature requests on the <a href=\"https://github.com/oxfordinternetinstitute/gephi-plugins/issues/\">GitHub page</a>.</p>\n<p>&nbsp;</p>\n<p>Release notes:</p>\n<p>1.0 (6 Nov 2012) Initial release</p>\n<p>1.1 (Jan 2013) Updated for 0.8.2 Gephi release</p>\n<p>1.1.1 (Feb 2013) Store edge weight to the ‘size’ attribute in the data so that this is displayed by Sigma.js. It is likely necessary to tweak the minEdgeSize and maxEdgeSize values in config.json for your particular configuration. The config.json files is now in pretty-print mode to make it easier to view and edit.</p>\n<p>1.2 (Aug 2013)</p>\n<ul>\n<li>Fix error in configuration causing ‘dim’ option not to work</li>\n<li>Force UTF-8 encoding on Mac/Windows for data/config files</li>\n<li>Fix error when graph had no edges</li>\n<li>Export edge color if given; if not use blend of source and target nodes’ colors</li>\n<li>Fix error when export path given was invalid</li>\n<li>Offer option to replace node ids with numbers (can be more compact for large graphs)</li>\n</ul>"
},{
  "id": "seadragon-web-export",
  "name": "Seadragon Web Export",
  "catchphrase": "",
  "types": [
    "exports"
  ],
  "images": [
    "imgs/seadragon-web-export/seadragon-plugin-settings.png",
    "imgs/seadragon-web-export/seadragon-plugin-export.png",
    "imgs/seadragon-web-export/seadragon-a.png"
  ],
  "authors": [
    {
      "name": "Mathieu Bastian",
      "link": "http://gephi.org"
    }
  ],
  "sourcecode": "https://github.com/mbastian/gephi-plugins/tree/seadragon-plugin",
  "license": "Apache v2",
  "versions": {
    "0.8.2": "0.8.2/seadragon-web-export.zip"
  },
  "last_update": "January 4, 2013",
  "description": "<p>Export networks on the web with the <a href=\"http://www.seadragon.com\">Seadragon</a> dynamic exploration tool.</p>\n<p>* When a graph is loaded, go to <strong>File &gt; Export &gt; Seadragon Web</strong> and get the HTML file ready to use<br>\n* Zoom and pan into the graph<br>\n* Seadragon is pure Javascript and works on <strong>all modern browsers</strong><br>\n* As it uses image tiles (like Google Maps), there is <strong>no graph size limit</strong><br>\n* Export is similar as PDF and includes all settings from Preview</p>\n<p>Seadragon is a Microsoft Live Labs application and is released under Ms-PL license (Microsoft’s open source license) . Kudos to them for this great library.<br>\nExample Sample with <a href=\"http://diseasome.eu\">Diseasome</a> Network dataset directly exported from Gephi How to use the Plugin</p>\n<p style=\"margin-bottom: 25px; margin-top: 20px;\">Install the plugin from Gephi, “Tools &gt; Plugin” and find <strong>Seadragon Web Export</strong>. After restarting Gephi, the plugin is installed in the export menu. Load a sample network and try the plugin. Go to the Preview tab to configure the rendering settings like colors, labels and edges.</p>\n<div id=\"attachment_3895\" class=\"wp-caption alignnone\" style=\"width: 488px\"><a href=\"https://marketplace.gephi.org/wp-content/uploads/2013/01/seadragon-plugin-export.png?022bbc\"><img class=\"size-full wp-image-3895\" title=\"seadragon-plugin-export\" src=\"https://marketplace.gephi.org/wp-content/uploads/2013/01/seadragon-plugin-export.png?022bbc\" alt=\"\" width=\"478\" height=\"383\"></a><p class=\"wp-caption-text\">Export directly from Gephi Export menu</p></div>\n<p style=\"margin-bottom: 25px; margin-top: 20px;\">The settings asks for a valid directory where to export the files and the size of the canvas. Bigger is the canvas, more you can zoom in, but it takes longer time to generate and to load. If the process hangs and never finishes, reduce the dimensions as you’re hitting the memory limit.</p>\n<div id=\"attachment_3896\" class=\"wp-caption alignnone\" style=\"width: 489px\"><a href=\"https://marketplace.gephi.org/wp-content/uploads/2013/01/seadragon-plugin-settings.png?022bbc\"><img class=\"size-full wp-image-3896\" title=\"seadragon-plugin-settings\" src=\"https://marketplace.gephi.org/wp-content/uploads/2013/01/seadragon-plugin-settings.png?022bbc\" alt=\"\" width=\"479\" height=\"399\"></a><p class=\"wp-caption-text\">Export settings, configure the size of the image</p></div>\n<p>Note that result on the local hard-drive can’t be viewed with Chrome, due to <a href=\"http://code.google.com/p/chromium/issues/detail?id=40787&amp;q=ajax%20local&amp;colspec=ID%20Stars%20Pri%20Area%20Feature%20Type%20Status%20Summary%20Modified%20Owner%20Mstone%20OS\">a bug</a>. Run Chrome with “–allow-file-access-from-files” option to make it work.</p>"
},{
  "id": "loxa-web-site-export",
  "name": "Loxa Web Site Export",
  "catchphrase": "",
  "types": [
    "exports"
  ],
  "images": [
    "imgs/loxa-web-site-export/lwseV031.png",
    "imgs/loxa-web-site-export/loxa.png",
    "imgs/loxa-web-site-export/example.png"
  ],
  "authors": [
    {
      "name": "Jorge Lopez-Vargas",
      "link": "http://cafelojano.wordpress.com"
    }
  ],
  "sourcecode": "https://github.com/jorgaf/LoxaWebSiteExport",
  "license": "GPL v3",
  "versions": {
    "0.8.2": "0.8.2/ec-loxa-sna-gephi-031.nbm"
  },
  "last_update": "June 22, 2013",
  "description": "<p>Loxa Web Site Export Plugin is a plugin developed for Gephi whose purpose is to allow easy publication of the analysis, descriptions and findings. The result of the implementation of the plugin is a fully functional website and easy customization, thereby allowing to publish the results of their work</p>\n<p>Features:</p>\n<p>Lets build a Web site for the project.<br>\nWorkspaces are the analysis performed, of which you can see a browse graph (using sigmajs), see statistics (number of nodes and arcs, weight and density of the graph), description of the analysis and lets you download files (from the graph and image – pdf format).<br>\nThe analysis information is stored in a JSON file for easy editing, which supports HTML tags to enhance your presentation.<br>\nThe most important and significant findings are displayed in the bottom of the image.<br>\nFull AJAX for asynchronous calls to the server to see statistics for each analysis.<br>\nIt works in most modern browsers (tested: Safari, Firefox, Chrome, Internet Explorer).</p>\n<p>Version 0.3:<br>\nVery quick generation<br>\nBrowse the graph using sigmajs. Now you can select nodes<br>\nNew interface<br>\nAnd now you can download the source code from GitHub</p>\n<p>Version 0.3.1:</p>\n<ul>\n<li>Support Gephi 0.8.2beta</li>\n<li><span style=\"line-height: 13px\">Redesign interface new style</span></li>\n<li>Search nodes via autocomplete, the node selected is placed in the center of the viewer of graph</li>\n<li>Get more information from project properties. In Gephi go to File-&gt;Properties and complete the form and this values will be used in the Website generated.</li>\n<li>Customization more easy!. The json file, now is in pretty format.</li>\n<li>Less clicks to view description and metrics.</li>\n<li>Now you can publish metrics and his values, with a description (it is shown when you click the metric name).</li>\n</ul>\n<p>To view all the new features, visit our web page.</p>"
},{
  "id": "json-exporter",
  "name": "JSON Exporter",
  "catchphrase": "",
  "types": [
    "exports"
  ],
  "images": [],
  "authors": [
    {
      "name": "Scott Hale",
      "link": "http://www.scotthale.net/"
    }
  ],
  "sourcecode": "https://github.com/oxfordinternetinstitute/gephi-plugins/tree/JSONExporter",
  "license": "GPL v3",
  "versions": {
    "0.8.2": "0.8.2/uk-ac-ox-oii-jsonexporter9.nbm"
  },
  "last_update": "August 9, 2013",
  "description": "<p>Exports the network to a JSON file with an array of nodes and an array of edges. This file is suitable to be used with the parseJSON plugin to Sigma.js. JSON allows Sigma.js to be faster and work</p>\n<p><strong> Why use JSON and not Gexf for Sigma?</strong><br>\nGexf is larger than JSON using extra bandwidth (important for mobile), does not parse correctly on Internet Explorer (yes there are still people using this browser), and is faster (everyone wants that!). More information <a href=\"http://blogs.oii.ox.ac.uk/vis/?p=149\" target=\"_blank\">here</a>.</p>\n<p>Sigma.js website: <a href=\"http://sigmajs.org/\" target=\"_blank\">http://sigmajs.org/</a></p>\n<p><strong>Sigma.js JSON parser</strong><br>\nUse the sigma.parseJson.js plugin to Sigma just as you use the parseGexf plugin and enjoy all the benefits of JSON.</p>\n<p>Release notes:<br>\nv1<br>\nInitial release</p>\n<p>v1.1 (Aug 2013)</p>\n<ul>\n<li>Switch to Google Gson for underlying JSON conversion fixing issues with improper escapes.</li>\n<li>Export edge attributes</li>\n<li>Export edge color</li>\n</ul>"
},{
  "id": "graph-streaming",
  "name": "Graph Streaming",
  "catchphrase": "",
  "types": [
    "exports",
    "imports"
  ],
  "images": [
    "imgs/graph-streaming/tumbnail.jpeg"
  ],
  "authors": [
    {
      "name": "André Panisson",
      "link": "https://code.launchpad.net/~panisson"
    }
  ],
  "sourcecode": "https://github.com/gephi/gephi-plugins/tree/graph-streaming",
  "license": "GPL v2",
  "versions": {
    "0.8.2": "0.8.2/org-gephi-graphstreaming.nbm"
  },
  "last_update": "April 18, 2013",
  "description": "<h3>Introduction</h3>\n<p>The purpose of the Graph Streaming API is to build a unified framework for streaming graph objects. Gephi’s data structure and visualization engine has been built with the idea that a graph is not static and might change continuously. By connecting Gephi with external data-sources, we leverage its power to visualize and monitor complex systems or enterprise data in real-time. Moreover, the idea of streaming graph data goes beyond Gephi, and a unified and standardized API could bring interoperability with other available tools for graph and network analysis, as they could start to interoperate with other tools in a distributed and cooperative fashion.</p>\n<h3>Plugin Owner’s Notes</h3>\n<p>With the increasing level of connectivity and cooperation between systems, for a system that aim to be interoperable, it is imperative to comply with the available standards. Graph objects are abstractions that can represent a wide range of real-world structures, from computer networks to human interactions, and there are a lot of standards to exchange graph data in different formats, from text-based formats to xml-based formats. But the real-world structures are constantly changing, and the current formats are not suitable to exchange such type of dynamic data.</p>\n<p>A lot of well-established systems already stream data to its users using a streaming API. Twitter for example defined a Streaming API to allow near-realtime access to its data. They are using two different formats: XML and JSON, but JSON is strongly encouraged over XML, as JSON is more compact and parsing is greatly simplified.</p>\n<p>We are not the first to implement a Graph Streaming API, and another very interesting experience is the GraphStream Java Library. It is composed of an API that gives a way to add edges and nodes in a graph and make them evolve. The graphs are composed of nodes and edges that can appear, disappear or be modified, and these operations are called events. The sequence of operations that occur in a graph is seen as a stream of events.</p>\n<p>So, as other people already had successful experiences with graph streaming, why not start our work based on these experiences? That’s what we are doing, and beyond finding these experiences very useful, we are also trying to be compatible with the available work. This Gephi Graph Streaming release is using two formats: JSON for flexibility, and a text-based format, based in the GraphStream implementation.</p>\n<p>To illustrate how simple it will be to connect to a master, <a href=\"http://www.youtube.com/watch?v=7SW_FDiY0sg\" target=\"_blank\">this video</a> shows Gephi connecting to a master and visualizing the received graph data in real time. The graph in this demo is a part of the Amazon.com library, where the nodes represent books and the edges represent their similarities. For each book, a node is added, the similar books are explored, adding the similar ones as nodes and the similarity as an edge.</p>\n<p>The Graph Streaming specification goes beyond the simple fact that a client can pull data from a master: in fact, clients can interact with the master pushing data to it, in a REST architecture. The same data format used by the master to send graph events to the clients is used by clients to interact with the master.</p>\n<p>But what about connecting two different Gephi instances together? One instance will be master, and the other client. Using the Graph Streaming API, a change in a graph at the master’s workspace should cause a change in the client’s workspace, and a change at the client’s workspace will cause it to send requests to the master to update its graph accordingly. Both instances working in a distributed mode. In fact, different people could work in a distributed mode to construct a graph: it’s the Collaborative Graph Construction.</p>"
}
  ]
}