{
  "plugins": [
    {
      "id": "geolayout-plugin",
      "name": "GeoLayout",
      "short_description": "A layout to display geocoded data",
      "long_description": "This plugin contains the \"GeoLayout\", which displays your graph based on geocoded attributes (i.e. latitude and longitude) and standard projections.",
      "readme": "## Introduction\n\nA Gephi plugin to display your geocoded graphs.\n\n## Plugin Owner’s Notes\n\nThis plugin contains only a layout (“GeoLayout”) to display your graph according to geocoded attributes. To use it:\n\n1. Select the two attributes which contain the geocoded coordinates of your nodes (latitude and longitude)\n2. Select the projection you want to use\n3. Set the other parameters according to the selected projection\n4. Launch the algorithm\n\nThe available projections are:\n\n* [Mercator](http://bit.ly/JQuvw)\n* [Tranverse Mercator](http://bit.ly/btWRTI)\n* [Miller cylindrical](http://bit.ly/agJOxd)\n* [Gall-Peters](http://bit.ly/Nj5cW)\n* [Sinusoidal](http://bit.ly/a8SsNg)\n* [Lambert cylindrical](http://bit.ly/cnuxqr)\n* [Winkel Tripel](http://en.wikipedia.org/wiki/Winkel_tripel_projection)\n* [Equirectangular](http://bit.ly/vxEmy)\n\nFor any questions or just more information, you can check the related [thread](http://bit.ly/a6itGZ) on the Gephi forum.\n\nAnd if, for any reason, some of your nodes do not have valid values on the selected attributes (for latitude and longitude), they will be displayed on a line on the bottom of your graph (then, you can delete them or do what you want). Also make sure your latitude and longitude columns are of type \u0027double\u0027, not \u0027string\u0027.\n",
      "license": "GPL v3",
      "authors": [
        {
          "name": "Alexis Jacomy",
          "email": null,
          "link": null
        }
      ],
      "category": "Layout",
      "last_update": "December 13, 2015",
      "images": [
        {
          "image": "imgs/geolayout-plugin/geolayout_example.png",
          "thumbnail": "imgs/geolayout-plugin/geolayout_example-thumbnail.png"
        },
        {
          "image": "imgs/geolayout-plugin/geolayout_screenshot.png",
          "thumbnail": "imgs/geolayout-plugin/geolayout_screenshot-thumbnail.png"
        }
      ],
      "versions": {
        "0.8.2": {
          "url": "0.8.2/org-gephi-plugins-layout-geo.nbm",
          "last_update": "January 4, 2013"
        },
        "0.9-SNAPSHOT": {
          "url": "0.9-SNAPSHOT/geolayout-plugin-0.9-SNAPSHOT.nbm",
          "last_update": "December 13, 2015"
        }
      },
      "sourcecode": null,
      "homepage": null
    },
    {
      "id": "linkfluence-plugin",
      "name": "Linkfluence Plugin",
      "short_description": "Public plugin for Linkfluence with some extra data manipulation features and tools",
      "long_description": "This plugin provides some extra features for Overview and Data Laboratory such as nodes massive tagging, opening of urls from nodes and copying columns to clipboard.",
      "readme": null,
      "license": "GPL v3",
      "authors": [
        {
          "name": "Eduardo Ramos",
          "email": null,
          "link": null
        }
      ],
      "category": "Tool",
      "last_update": "December 13, 2015",
      "images": [
        {
          "image": "imgs/linkfluence-plugin/img.png",
          "thumbnail": "imgs/linkfluence-plugin/img-thumbnail.png"
        }
      ],
      "versions": {
        "0.9-SNAPSHOT": {
          "url": "0.9-SNAPSHOT/linkfluence-plugin-0.9-SNAPSHOT.nbm",
          "last_update": "December 13, 2015"
        }
      },
      "sourcecode": null,
      "homepage": null
    },
{
  "id": "label-propagation-clustering",
  "name": "Label Propagation Clustering",
  "catchphrase": "",
  "types": [
    "clusters"
  ],
  "images": [
    "imgs/label-propagation-clustering/snapshot.png"
  ],
  "authors": [
    {
      "name": "Oualid Boutemine",
      "link": "https://github.com/BoutemineOualid"
    }
  ],
  "sourcecode": "https://github.com/BoutemineOualid/gephi-plugins-label_propagation",
  "license": "GPL v3",
  "versions": {
    "0.8.2": "0.8.2/labelpropagationclustering1.1.nbm"
  },
  "last_update": "June 23, 2014",
  "description": "<p>A plugin that provides an implementation of the label propagation graph clustering algorithm described in (1).<br>\nThis plugin offers an animated mode which allows the visualization of the labels propagation over the graph nodes. This feature is helpful when studying the behaviour of the algorithm on specific use cases. The current implementation does not take into consideration edges weights/direction, it also lacks defensive/offensive propagation support (2) which improves the performance. These missing features will be added later.</p>\n<p>1. Raghavan, U. N., Albert, R., &amp; Kumara, S. (2007). Near linear time algorithm to detect community structures in large-scale networks. Physical Review E, 76(3), 036106.<br>\n2. Šubelj, L., &amp; Bajec, M. (2011). Unfolding communities in large complex networks: Combining defensive and offensive label propagation for core extraction. Physical Review E, 83(3), 036103.</p>"
},{
  "id": "girvan-newman-clustering",
  "name": "Girvan Newman Clustering",
  "catchphrase": "",
  "types": [
    "clusters"
  ],
  "images": [
    "imgs/girvan-newman-clustering/gn.png"
  ],
  "authors": [
    {
      "name": "Jaroslav Kuchar",
      "link": "https://github.com/jaroslav-kuchar/"
    }
  ],
  "sourcecode": "https://github.com/jaroslav-kuchar/GirmanNewmanClustering",
  "license": "GPL v3",
  "versions": {
    "0.8.2": "0.8.2/cz-cvut-fit-krizeji1-girvan_newman.nbm"
  },
  "last_update": "May 30, 2014",
  "description": "<p>The Girvan Newman Clustering plugin for Gephi. This plugin finds clusters in graph, which can be used in Social Network Analysis.</p>\n<p>The Girvan–Newman algorithm detects communities by progressively removing edges from the original network. The connected components of the remaining network are the comunnities. Instead of trying to construct a measure that tells us which edges are the most central to communities, the Girvan–Newman algorithm focuses on edges that are most likely “between” communities.</p>"
},{
  "id": "markov-cluster-algorithm-mcl",
  "name": "Markov Cluster Algorithm (MCL)",
  "catchphrase": "",
  "types": [
    "clusters"
  ],
  "images": [
    "imgs/markov-cluster-algorithm-mcl/mcl1.png",
    "imgs/markov-cluster-algorithm-mcl/mcl.png"
  ],
  "authors": [
    {
      "name": "Jaroslav Kuchar",
      "link": "https://github.com/jaroslav-kuchar/"
    }
  ],
  "sourcecode": "https://github.com/jaroslav-kuchar/MarkovClustering",
  "license": "GPL v3",
  "versions": {
    "0.8.2": "0.8.2/cz-cvut-fit-krizeji1-markov_cluster.nbm"
  },
  "last_update": "May 30, 2014",
  "description": "<p>The Markov Clustering plugin for Gephi. This plugin finds clusters in graph, which can be used in Social Network Analysis.</p>\n<p>Clustering on Graphs: The Markov Cluster Algorithm (MCL)</p>\n<p>MCL details are freely available at http://www.micans.org/mcl/</p>"
},{
  "id": "molecular-complex-detection-mcode-clustering",
  "name": "Molecular Complex Detection (MCODE) Clustering",
  "catchphrase": "",
  "types": [
    "clusters"
  ],
  "images": [
    "imgs/molecular-complex-detection-mcode-clustering/mcode.png"
  ],
  "authors": [
    {
      "name": "Jaroslav Kuchar",
      "link": "https://github.com/jaroslav-kuchar/"
    }
  ],
  "sourcecode": "https://github.com/jaroslav-kuchar/MCodeClustering",
  "license": "GPL v3",
  "versions": {
    "0.8.2": "0.8.2/cz-cvut-fit-krizeji1-mcode.nbm"
  },
  "last_update": "May 29, 2014",
  "description": "<p>The Molecular Complex Detection clustering plugin for Gephi. This plugin finds clusters in graph, which can be used in Social Network Analysis.</p>\n<p>Clustering on Graphs:</p>\n<p>details are available at http://www.biomedcentral.com/1471-2105/4/2</p>"
},{
  "id": "gc-viz",
  "name": "GC-Viz",
  "catchphrase": "",
  "types": [
    "clusters",
    "layout"
  ],
  "images": [],
  "authors": [
    {
      "name": "Brigitte Boden",
      "link": "http://dme.rwth-aachen.de/de/gcviz"
    }
  ],
  "sourcecode": "https://github.com/bboden/gephi-plugins/",
  "license": "GPL v3",
  "versions": {
    "0.8.2": "0.8.2/org-i9-GCViz1.nbm"
  },
  "last_update": "November 7, 2013",
  "description": "<p>The GC-Viz plugin contains the algorithms GAMer and DB-CSC for the clustering of graphs with node attributes. It also contains a layout for visualizing and comparing the clustering results.</p>\n<p>The plugin has been developed by Brigitte Boden, Roman Haag and Houran Ketabdar.</p>\n<p>The plugin is described in the following paper: Brigitte Boden, Roman Haag, and Thomas Seidl. Detecting and exploring clusters in attributed graphs. In 22st ACM International Conference on Information and Knowledge Management, CIKM13, 2013.</p>"
},{
  "id": "chinese-whispers-clustering",
  "name": "Chinese Whispers Clustering",
  "catchphrase": "",
  "types": [
    "clusters"
  ],
  "images": [
    "imgs/chinese-whispers-clustering/cw-new.png"
  ],
  "authors": [
    {
      "name": "Thomas Efer",
      "link": "http://asv.informatik.uni-leipzig.de/staff/Thomas_Efer"
    }
  ],
  "sourcecode": "https://github.com/efi/gephi-cw",
  "license": "GPL v2",
  "versions": {
    "0.8.2": "0.8.2/de-uni_leipzig-informatik-asv-gephi-chinesewhispers4.nbm"
  },
  "last_update": "June 21, 2015",
  "description": "<p>Chinese Whispers Clustering according to the <a href=\"http://wortschatz.uni-leipzig.de/~cbiemann/pub/2006/BiemannTextGraph06.pdf\">paper by Chris Biemann</a>. The algorithm is time-linear (w.r.t. the number of edges), non-deterministic and extremely fast!</p>\n<p>The current implementation represents a simple variant (no random class mutations yet), works single-threaded and allows for a randomized (rgb-space) coloring of the resulting clusters giving a fast visual feedback. For questions and ideas please contact the plugin author <a title=\"efer@informatik.uni-leipzig.de\" href=\"mailto:efer@informatik.uni-leipzig.de\">Thomas Efer</a>.</p>\n<p><strong><em>Changelog</em></strong>:</p>\n<ul>\n<li><em>2015-06-21, v. 0.8:</em> Novel cluster naming for greater workflow consistency<em>&nbsp;(contributions from Jörg Bliesener)</em></li>\n<li><em>2014-07-23, v. 0.7:</em> Added options for the handling of unconnected nodes</li>\n<li><em>2014-02-16, v. 0.6:</em>&nbsp;Added option to cluster only visible graph parts<em> (contributions from Jörg Bliesener)</em></li>\n<li><em></em><em>2014-02-08, v. 0.5:</em> Fixed freezing bug, Renewed settings UI<em> (contributions from Jörg Bliesener)</em></li>\n<li><em>2012-08-21, v. 0.3:</em> Stabilized color assignment, Added options for randomized node ordering, stepwise vs. continuous mode and minimum edge weight</li>\n<li><em>2012-08-16, v. 0.2:</em> Added options to control class propagation calculations (Modes: top / dist / dist-log / vote)</li>\n<li><em>2012-05-09, v. 0 .1:</em> Initial release</li>\n</ul>"
},{
  "id": "recast-column",
  "name": "Recast column",
  "catchphrase": "",
  "types": [
    "data laboratory"
  ],
  "images": [
    "imgs/recast-column/image_4f4d1f86b0c4f.png"
  ],
  "authors": [
    {
      "name": "Taras Klaskovsky",
      "link": "https://github.com/megaterik"
    }
  ],
  "sourcecode": "https://github.com/megaterik/gephi/commits/change-type-of-column",
  "license": "GPL v3",
  "versions": {
    "0.8.2": "0.8.2/org-gephi-recast_manipulator-1.nbm"
  },
  "last_update": "February 19, 2013",
  "description": "<h3>Introduction</h3>\n<p>Allows to recast column type in data laboratory.</p>\n<h3>Plugin Owner’s Notes</h3>\n<p>Useful when imported column has default type string, but contains numbers, or booleans, or chars. Has autoconvert option and gui. Also can get any or set any standart column, which is currently impossible to do with standart interface. Installed in Data Laboratory -&gt; More actions.</p>\n<p>Feel free to contact me with any questions or suggestions: megaterik at gmail.com.<br>\n–Taras Klaskovsky</p>"
},{
  "id": "google-maps-exporter",
  "name": "Google Maps Exporter",
  "catchphrase": "",
  "types": [
    "exports"
  ],
  "images": [
    "imgs/google-maps-exporter/gme-02.png",
    "imgs/google-maps-exporter/gme-01.png",
    "imgs/google-maps-exporter/gme-high.png",
    "imgs/google-maps-exporter/graphmap-logo.jpg"
  ],
  "authors": [
    {
      "name": "P M",
      "link": "https://googlemapsexporter.firebaseapp.com/index2.html"
    }
  ],
  "sourcecode": "https://github.com/pegep/GoogleMapsExporter",
  "license": "GPL v3",
  "versions": {
    "0.8.2": "0.8.2/"
  },
  "last_update": "December 14, 2015",
  "description": "<p>Exports graphs from Gephi for use with Google Maps API. Similar to browsing maps in Google Maps you can browse graphs the same way. Pre-rendering the graph makes it possible to view even large graphs fluently in browser.</p>\n<p>Usage:<br>\n* File &gt; Export &gt; Google Maps Exporter<br>\n* Open index.html or index2.html in export directory</p>\n<p>The exporter will render the graph as PNG tiles and output a HTML and JavaScript files. There are two examples: index.html + ui.js and index2.html + ui2.js. Custom functionality (eg. hovering over a node, clicking a node) can be added with Google Maps API.</p>\n<p>Live example at<br>\n<a title=\"https://googlemapsexporter.firebaseapp.com/index.html\" href=\"https://googlemapsexporter.firebaseapp.com/index.html\">https://googlemapsexporter.firebaseapp.com/index.html</a> and<br>\n<a title=\"https://googlemapsexporter.firebaseapp.com/index2.html\" href=\"https://googlemapsexporter.firebaseapp.com/index2.html\">https://googlemapsexporter.firebaseapp.com/index2.html</a></p>\n<div id=\"attachment_30917\" class=\"wp-caption alignnone\" style=\"width: 310px\"><a href=\"https://marketplace.gephi.org/wp-content/uploads/2014/11/gme-01.png?022bbc\"><img class=\"size-medium wp-image-30917\" title=\"Browsing a graph\" alt=\"gme-01\" src=\"https://marketplace.gephi.org/wp-content/uploads/2014/11/gme-01-300x259.png?022bbc\" width=\"300\" height=\"259\"></a><p class=\"wp-caption-text\">Browsing graph is similar to browsing Google Maps</p></div>\n<div id=\"attachment_30918\" class=\"wp-caption alignnone\" style=\"width: 310px\"><a href=\"https://marketplace.gephi.org/wp-content/uploads/2014/11/gme-02.png?022bbc\"><img class=\"size-medium wp-image-30918\" title=\"Browsing with node data visible\" alt=\"\" src=\"https://marketplace.gephi.org/wp-content/uploads/2014/11/gme-02-300x247.png?022bbc\" width=\"300\" height=\"247\"></a><p class=\"wp-caption-text\">Visible nodes are updated on the data table below graph. Table is automatically updated while panning and zooming in on the graph. Columns can be ordered.</p></div>\n<p>&nbsp;</p>"
},{
  "id": "export-to-shp",
  "name": "Export to SHP",
  "catchphrase": "",
  "types": [
    "exports"
  ],
  "images": [],
  "authors": [
    {
      "name": "Roman Seidl",
      "link": "http://granul.at"
    }
  ],
  "sourcecode": "https://github.com/romanseidl/SHPExporter",
  "license": "GPL v3",
  "versions": {
    "0.8.2": "0.8.2/at-granul-gephi-shpexporter.nbm"
  },
  "last_update": "April 16, 2013",
  "description": "<p>This Plugin exports two Shapefiles: one for the edges, and one for the nodes. The shapefiles (the respective DBF-Files) contain the columns of the edge and shape tables. It adds the current width/size and color in gephi to two additional columns.</p>\n<p>The geography is rather simple. The location info is either read from columns in the node table (I use parts of David Sheppard’s ExportToEarth Exporter to do that) or from a fake geography – that is the current position of the nodes in the gephi layout.</p>\n<p>One can then easily import the two datasets into QGIS or any other mapping tool and add a symbology. The only drawback of this simple solution is that in such tools you won’t be able to draw arrows or even more arrows that don’t intersect when they go into both directions.</p>\n<p>Copyright (c) 2013 by Roman Seidl – romanAeTgranul.at</p>\n<p>This Program uses code copyright (c) 2012 by David Shepard</p>"
}
  ]
}